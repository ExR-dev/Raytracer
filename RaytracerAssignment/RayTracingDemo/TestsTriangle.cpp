#include "catch.h"

#include <iostream>
#include <array>
#include <string>
#include <cmath>

#include "TestHelper.h"
#include "Ray.h"
#include "Triangle.h"

struct TriangleTestData
{
    std::array<Vector3D, 4> triangleData;
    std::array<Vector3D, 2> rayData;
    bool hits;
    double distance;
};

SCENARIO("A Triangle can be created and used for correct intersection testing with rays", "[Plane]")
{
    typedef Vector3D Vec3;
    // Triangle: colour, point 0, point 1, point 2
    // Ray: origin, direction'
    std::vector<TriangleTestData> testData =
    {
        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, -1.0, 0.0), Vec3(0.0, 1.0, 0.0), Vec3(1.0, -1.0, 0.0)}, {Vec3(0.0, 0.0, -10.0), Vec3(0.0, 0.0, 1.0)}, true, 10.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, -1.0, 1.0), Vec3(0.0, 1.0, 1.0), Vec3(1.0, -1.0, 1.0)}, {Vec3(0.0, 0.0, -10.0), Vec3(0.0, 0.0, 1.0)}, true, 11.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-10.0, -10.0, 0.0), Vec3(0.0, 10.0, 0.0), Vec3(10.0, -10.0, 0.0)}, {Vec3(0.0, 0.0, -5.0), Vec3(0.0, 0.0, 1.0)}, true, 5.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, -2.0, 0.0), Vec3(0.0, 3.0, 0.0), Vec3(4.0, -5.0, 0.0)}, {Vec3(0.0, 0.0, -10.0), Vec3(0.0, 0.0, 1.0)}, true, 10.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, -1.0, -1.0), Vec3(0.0, 1.0, -1.0), Vec3(1.0, -1.0, -1.0)}, {Vec3(-1.0, -1.0, -10.0), Vec3(0.0, 0.0, 1.0)}, true, 9.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, -1.0, -2.0), Vec3(0.0, 1.0, -2.0), Vec3(1.0, -1.0, -2.0)}, {Vec3(0.0, 1.0, -10.0), Vec3(0.0, 0.0, 1.0)}, true, 8.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, -1.0, -3.0), Vec3(0.0, 1.0, -3.0), Vec3(1.0, -1.0, -3.0)}, {Vec3(1.0, -1.0, -10.0), Vec3(0.0, 0.0, 1.0)}, true, 7.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, -2.0, -4.0), Vec3(0.0, 0.0, -4.0), Vec3(1.0, -2.0, -4.0)}, {Vec3(0.0, 0.0, -10.0), Vec3(0.0, 0.0, 1.0)}, true, 6.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(0.0, 0.0, -5.0), Vec3(1.0, 2.0, -5.0), Vec3(2.0, 0.0, -5.0)}, {Vec3(0.0, 0.0, -10.0), Vec3(0.0, 0.0, 1.0)}, true, 5.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-2.0, 0.0, -6.0), Vec3(-1.0, 2.0, -6.0), Vec3(0.0, 0.0, -6.0)}, {Vec3(0.0, 0.0, -10.0), Vec3(0.0, 0.0, 1.0)}, true, 4.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(2.0, 0.0, -7.0), Vec3(3.0, 2.0, -7.0), Vec3(4.0, 0.0, -7.0)}, {Vec3(3.0, 2.0, -10.0), Vec3(0.0, 0.0, 1.0)}, true, 3.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(3.0, 2.0, -8.0), Vec3(4.0, 4.0, -8.0), Vec3(5.0, 2.0, -8.0)}, {Vec3(3.0, 2.0, -10.0), Vec3(0.0, 0.0, 1.0)}, true, 2.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(1.0, 2.0, -9.0), Vec3(2.0, 4.0, -9.0), Vec3(3.0, 2.0, -9.0)}, {Vec3(3.0, 2.0, -10.0), Vec3(0.0, 0.0, 1.0)}, true, 1.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, -1.0, 0.0), Vec3(0.0, 1.0, 0.0), Vec3(1.0, -1.0, 0.0)}, {Vec3(0.3, -0.1, -10.0), Vec3(0.0, 0.0, 1.0)}, true, 10.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, -1.0, 0.0), Vec3(0.0, 1.0, 0.0), Vec3(1.0, -1.0, 0.0)}, {Vec3(-0.4, 0.2, -10.0), Vec3(0.0, 0.0, 1.0)}, true, 10.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, -1.0, 0.0), Vec3(0.0, 1.0, 0.0), Vec3(1.0, -1.0, 0.0)}, {Vec3(-0.15, -0.3, -10.0), Vec3(0.0, 0.0, 1.0)}, true, 10.0},


        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, 0.0, -1.0), Vec3(0.0, 0.0,1.0), Vec3(1.0, 0.0, -1.0)}, {Vec3(0.0, -10.0, 0.0), Vec3(0.0, 1.0, 0.0)}, true, 10.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, 1.0, -1.0), Vec3(0.0, 1.0, 1.0), Vec3(1.0, 1.0, -1.0)}, {Vec3(0.0, -10.0, 0.0), Vec3(0.0, 1.0, 0.0)}, true, 11.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-10.0, 0.0, -10.0), Vec3(0.0, 0.0, 10.0), Vec3(10.0, 0.0, -10.0)}, {Vec3(0.0, -5.0, 0.0), Vec3(0.0, 1.0, 0.0)}, true, 5.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, 0.0, -2.0), Vec3(0.0, 0.0, 3.0), Vec3(4.0, 0.0, -5.0)}, {Vec3(0.0, -10.0, 0.0), Vec3(0.0, 1.0, 0.0)}, true, 10.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, -1.0, -1.0), Vec3(0.0, -1.0, 1.0), Vec3(1.0, -1.0, -1.0)}, {Vec3(-1.0, -10.0, -1.0), Vec3(0.0, 1.0, 0.0)}, true, 9.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, -2.0, -1.0), Vec3(0.0, -2.0, 1.0), Vec3(1.0, -2.0, -1.0)}, {Vec3(0.0, -10.0, 1.0), Vec3(0.0, 1.0, 0.0)}, true, 8.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, -3.0, -1.0), Vec3(0.0, -3.0, 1.0), Vec3(1.0, -3.0, -1.0)}, {Vec3(1.0, -10.0, -1.0), Vec3(0.0, 1.0, 0.0)}, true, 7.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, -4.0, -2.0), Vec3(0.0, -4.0, 0.0), Vec3(1.0, -4.0, -2.0)}, {Vec3(0.0, -10.0, 0.0), Vec3(0.0, 1.0, 0.0)}, true, 6.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(0.0, -5.0, 0.0), Vec3(1.0, -5.0, 2.0), Vec3(2.0, -5.0, 0.0)}, {Vec3(0.0, -10.0, 0.0), Vec3(0.0, 1.0, 0.0)}, true, 5.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-2.0, -6.0, 0.0), Vec3(-1.0, -6.0, 2.0), Vec3(0.0, -6.0, 0.0)}, {Vec3(0.0, -10.0, 0.0), Vec3(0.0, 1.0, 0.0)}, true, 4.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(2.0, -7.0, 0.0), Vec3(3.0, -7.0, 2.0), Vec3(4.0, -7.0, 0.0)}, {Vec3(3.0, -10.0, 2.0), Vec3(0.0, 1.0, 0.0)}, true, 3.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(3.0, -8.0, 2.0), Vec3(4.0, -8.0, 4.0), Vec3(5.0, -8.0, 2.0)}, {Vec3(3.0, -10.0, 2.0), Vec3(0.0, 1.0, 0.0)}, true, 2.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(1.0, -9.0, 2.0), Vec3(2.0, -9.0, 4.0), Vec3(3.0, -9.0, 2.0)}, {Vec3(3.0, -10.0, 2.0), Vec3(0.0, 1.0, 0.0)}, true, 1.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, 0.0, -1.0), Vec3(0.0, 0.0, 1.0), Vec3(1.0, 0.0, -1.0)}, {Vec3(0.3, -10.0, -0.1), Vec3(0.0, 1.0, 0.0)}, true, 10.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, 0.0, -1.0), Vec3(0.0, 0.0, 1.0), Vec3(1.0, 0.0, -1.0)}, {Vec3(-0.4, -10.0, 0.2), Vec3(0.0, 1.0, 0.0)}, true, 10.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, 0.0, -1.0), Vec3(0.0, 0.0, 1.0), Vec3(1.0, 0.0, -1.0)}, {Vec3(-0.15, -10.0, -0.3), Vec3(0.0, 1.0, 0.0)}, true, 10.0},


        {{Vec3(0.0, 0.0, 0.0), Vec3(-10.0, -10.0, 0.0), Vec3(0.0, 10.0, 0.0), Vec3(10.0, -10.0, 0.0)}, {Vec3(0.0, 0.0, -1.0), Vec3(sqrt(0.5), 0.0, sqrt(0.5))}, true, 1.414213},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-10.0, -10.0, 0.0), Vec3(0.0, 10.0, 0.0), Vec3(10.0, -10.0, 0.0)}, {Vec3(0.0, 0.0, -1.0), Vec3(-sqrt(0.5), 0, sqrt(0.5))}, true, 1.414213},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-10.0, -10.0, 0.0), Vec3(0.0, 10.0, 0.0), Vec3(10.0, -10.0, 0.0)}, {Vec3(0.0, 0.0, -1.0), Vec3(0.0, sqrt(0.5), sqrt(0.5))}, true, 1.414213},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-10.0, -10.0, 0.0), Vec3(0.0, 10.0, 0.0), Vec3(10.0, -10.0, 0.0)}, {Vec3(0.0, 0.0, -1.0), Vec3(0.0, -sqrt(0.5), sqrt(0.5))}, true, 1.414213},

        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, -1.0, 1.0), Vec3(0.0, 1.0, 2.0), Vec3(1.0, -1.0, 3.0)}, {Vec3(0.0, 0.0, -1.0), Vec3(0.0, 0.0, 1.0)}, true, 3.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, -1.0, 5.0), Vec3(0.0, 1.0, 3.0), Vec3(1.0, -1.0, -1.0)}, {Vec3(0.0, 0.0, -1.0), Vec3(0.0, 0.0, 1.0)}, true, 3.5},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, -1.0, -2.0), Vec3(0.0, 1.0, -3.0), Vec3(1.0, -1.0, -4.0)}, {Vec3(0.0, 0.0, -10.0), Vec3(0.0, 0.0, 1.0)}, true, 7.0},


        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, -1.0, 0.0), Vec3(0.0, 1.0, 0.0), Vec3(1.0, -1.0, 0.0)}, {Vec3(0.0, 0.0, -10.0),  Vec3(0.0, 0.0, 1.0) * -1}, false, 0.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, -1.0, 1.0), Vec3(0.0, 1.0, 1.0), Vec3(1.0, -1.0, 1.0)}, {Vec3(0.0, 0.0, -10.0), Vec3(0.0, 0.0, 1.0) * -1}, false, 0.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-10.0, -10.0, 0.0), Vec3(0.0, 10.0, 0.0), Vec3(10.0, -10.0, 0.0)}, {Vec3(0.0, 0.0, -5.0), Vec3(0.0, 0.0, 1.0) * -1}, false, 0.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, -2.0, 0.0), Vec3(0.0, 3.0, 0.0), Vec3(4.0, -5.0, 0.0)}, {Vec3(0.0, 0.0, -10.0), Vec3(0.0, 0.0, 1.0) * -1}, false, 0.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, -1.0, -1.0), Vec3(0.0, 1.0, -1.0), Vec3(1.0, -1.0, -1.0)}, {Vec3(-1.0, -1.0, -10.0), Vec3(0.0, 0.0, 1.0) * -1}, false, 0.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, -1.0, -2.0), Vec3(0.0, 1.0, -2.0), Vec3(1.0, -1.0, -2.0)}, {Vec3(0.0, 1.0, -10.0), Vec3(0.0, 0.0, 1.0) * -1}, false, 0.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, -1.0, -3.0), Vec3(0.0, 1.0, -3.0), Vec3(1.0, -1.0, -3.0)}, {Vec3(1.0, -1.0, -10.0), Vec3(0.0, 0.0, 1.0) * -1}, false, 0.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, -2.0, -4.0), Vec3(0.0, 0.0, -4.0), Vec3(1.0, -2.0, -4.0)}, {Vec3(0.0, 0.0, -10.0), Vec3(0.0, 0.0, 1.0) * -1}, false, 0.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(0.0, 0.0, -5.0), Vec3(1.0, 2.0, -5.0), Vec3(2.0, 0.0, -5.0)}, {Vec3(0.0, 0.0, -10.0), Vec3(0.0, 0.0, 1.0) * -1}, false, 0.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-2.0, 0.0, -6.0), Vec3(-1.0, 2.0, -6.0), Vec3(0.0, 0.0, -6.0)}, {Vec3(0.0, 0.0, -10.0), Vec3(0.0, 0.0, 1.0) * -1}, false, 0.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(2.0, 0.0, -7.0), Vec3(3.0, 2.0, -7.0), Vec3(4.0, 0.0, -7.0)}, {Vec3(3.0, 2.0, -10.0), Vec3(0.0, 0.0, 1.0) * -1}, false, 0.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(3.0, 2.0, -8.0), Vec3(4.0, 4.0, -8.0), Vec3(5.0, 2.0, -8.0)}, {Vec3(3.0, 2.0, -10.0), Vec3(0.0, 0.0, 1.0) * -1}, false, 0.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(1.0, 2.0, -9.0), Vec3(2.0, 4.0, -9.0), Vec3(3.0, 2.0, -9.0)}, {Vec3(3.0, 2.0, -10.0), Vec3(0.0, 0.0, 1.0) * -1}, false, 0.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, -1.0, 0.0), Vec3(0.0, 1.0, 0.0), Vec3(1.0, -1.0, 0.0)}, {Vec3(0.3, -0.1, -10.0), Vec3(0.0, 0.0, 1.0) * -1}, false, 0.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, -1.0, 0.0), Vec3(0.0, 1.0, 0.0), Vec3(1.0, -1.0, 0.0)}, {Vec3(-0.4, 0.2, -10.0), Vec3(0.0, 0.0, 1.0) * -1}, false, 0.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, -1.0, 0.0), Vec3(0.0, 1.0, 0.0), Vec3(1.0, -1.0, 0.0)}, {Vec3(-0.15, -0.3, -10.0), Vec3(0.0, 0.0, 1.0) * -1}, false, 0.0},

        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, -1.0, -1.0), Vec3(0.0, 1.0, -1.0), Vec3(1.0, -1.0, -1.0)}, {Vec3(-1.1, -1.1, -10.0), Vec3(0.0, 0.0, 1.0)}, false, 0.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, -1.0, -2.0), Vec3(0.0, 1.0, -2.0), Vec3(1.0, -1.0, -2.0)}, {Vec3(0.0, 1.1, -10.0), Vec3(0.0, 0.0, 1.0)}, false, 0.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, -1.0, -3.0), Vec3(0.0, 1.0, -3.0), Vec3(1.0, -1.0, -3.0)}, {Vec3(1.1, -1.1, -10.0), Vec3(0.0, 0.0, 1.0)}, false, 0.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, -1.0, -1.0), Vec3(0.0, 1.0, -1.0), Vec3(1.0, -1.0, -1.0)}, {Vec3(-1.0, 0.0, -10.0), Vec3(0.0, 0.0, 1.0)}, false, 0.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, -1.0, -1.0), Vec3(0.0, 1.0, -1.0), Vec3(1.0, -1.0, -1.0)}, {Vec3(1.0, 0.0, -10.0), Vec3(0.0, 0.0, 1.0)}, false, 0.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, -1.0, -1.0), Vec3(0.0, 1.0, -1.0), Vec3(1.0, -1.0, -1.0)}, {Vec3(1.0, 1.0, -10.0), Vec3(0.0, 0.0, 1.0)}, false, 0.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, -1.0, -1.0), Vec3(0.0, 1.0, -1.0), Vec3(1.0, -1.0, -1.0)}, {Vec3(-1.0, 1.0, -10.0), Vec3(0.0, 0.0, 1.0)}, false, 0.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, -1.0, -1.0), Vec3(0.0, 1.0, -1.0), Vec3(1.0, -1.0, -1.0)}, {Vec3(-10.0, -10.0, -10.0), Vec3(0.0, 0.0, 1.0)}, false, 0.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, -1.0, -2.0), Vec3(0.0, 1.0, -2.0), Vec3(1.0, -1.0, -2.0)}, {Vec3(0.0, 10.0, -10.0), Vec3(0.0, 0.0, 1.0)}, false, 0.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, -1.0, -3.0), Vec3(0.0, 1.0, -3.0), Vec3(1.0, -1.0, -3.0)}, {Vec3(10.0, -10.0, -10.0), Vec3(0.0, 0.0, 1.0)}, false, 0.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, -1.0, -1.0), Vec3(0.0, 1.0, -1.0), Vec3(1.0, -1.0, -1.0)}, {Vec3(-10.0, 0.0, -10.0), Vec3(0.0, 0.0, 1.0)}, false, 0.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, -1.0, -1.0), Vec3(0.0, 1.0, -1.0), Vec3(1.0, -1.0, -1.0)}, {Vec3(10.0, 0.0, -10.0), Vec3(0.0, 0.0, 1.0)}, false, 0.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, -1.0, -1.0), Vec3(0.0, 1.0, -1.0), Vec3(1.0, -1.0, -1.0)}, {Vec3(10.0, 10.0, -10.0), Vec3(0.0, 0.0, 1.0)}, false, 0.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-1.0, -1.0, -1.0), Vec3(0.0, 1.0, -1.0), Vec3(1.0, -1.0, -1.0)}, {Vec3(-10.0, 10.0, -10.0), Vec3(0.0, 0.0, 1.0)}, false, 0.0},

        {{Vec3(0.0, 0.0, 0.0), Vec3(-10.0, -10.0, 0.0), Vec3(0.0, 10.0, 0.0), Vec3(10.0, -10.0, 0.0)}, {Vec3(0.0, 0.0, -1.0), Vec3(sqrt(0.5), 0.0, sqrt(0.5)) * -1}, false, 0.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-10.0, -10.0, 0.0), Vec3(0.0, 10.0, 0.0), Vec3(10.0, -10.0, 0.0)}, {Vec3(0.0, 0.0, -1.0), Vec3(-sqrt(0.5), 0, sqrt(0.5)) * -1}, false, 0.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-10.0, -10.0, 0.0), Vec3(0.0, 10.0, 0.0), Vec3(10.0, -10.0, 0.0)}, {Vec3(0.0, 0.0, -1.0), Vec3(0.0, sqrt(0.5), sqrt(0.5)) * -1}, false, 0.0},
        {{Vec3(0.0, 0.0, 0.0), Vec3(-10.0, -10.0, 0.0), Vec3(0.0, 10.0, 0.0), Vec3(10.0, -10.0, 0.0)}, {Vec3(0.0, 0.0, -1.0), Vec3(0.0, -sqrt(0.5), sqrt(0.5)) * -1}, false, 0.0}

    };

    WHEN("A Triangle object is created and intersection tests are performed with rays")
    {
        THEN("The intersection function should correctly indicate if the ray hits the triangle, and if hits, at what distance")
        {
            for (auto& input : testData)
            {
                auto& triangleData = input.triangleData;
                auto& rayData = input.rayData;
                Triangle triangle(triangleData[0], triangleData[1], triangleData[2], triangleData[3]);
                Ray ray(rayData[0], rayData[1]);
                bool resultingHit = false;
                double resultingDistance = 0.0;
                resultingHit = triangle.Intersection(ray, resultingDistance);

                std::string info = "Triangle: p0 (" + ToString(triangleData[1]) + "), p1 (" + ToString(triangleData[2]) + "), p2 (" + ToString(triangleData[3]) + ")";
                info += "\nRay: origin(" + ToString(rayData[0]) + "), direction(" + ToString(rayData[1]) + ")";
                info += "\nExpected to hit: " + std::string(input.hits == true ? "yes" : "no");
                info += input.hits == true ? ("\nExpected distance to hit: " + std::to_string(input.distance)) : "";
                info += "\nResulted in hit: " + std::string(resultingHit == true ? "yes" : "no");
                info += resultingHit == true ? ("\nResulting distance to hit: " + std::to_string(resultingDistance)) : "";

                INFO(info);
                REQUIRE(resultingHit == input.hits);
                if (input.hits)
                    REQUIRE(ApproximatelyEqual(resultingDistance, input.distance));

            }
        }
    }
}